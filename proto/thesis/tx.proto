syntax = "proto3";
package thesis.thesis;

// this line is used by starport scaffolding # proto/tx/import

option go_package = "thesis/x/thesis/types";

// Msg defines the Msg service.
service Msg {
      rpc AddCertificate(MsgAddCertificate) returns (MsgAddCertificateResponse);
  rpc CreateDocument(MsgCreateDocument) returns (MsgCreateDocumentResponse);
  rpc AddUsers(MsgAddUsers) returns (MsgAddUsersResponse);
  rpc RemoveUsers(MsgRemoveUsers) returns (MsgRemoveUsersResponse);
  rpc EditFiles(MsgEditFiles) returns (MsgEditFilesResponse);
  rpc SignDocument(MsgSignDocument) returns (MsgSignDocumentResponse);
// this line is used by starport scaffolding # proto/tx/rpc
}

message MsgAddCertificate {
  string creator = 1;
  string hash = 2;
  string address = 3;
}

message MsgAddCertificateResponse {
  uint64 id = 1;
}
message MsgCreateDocument {
  string creator = 1;
  repeated string files = 2;
}

message MsgCreateDocumentResponse {
  uint64 id = 1;
}

message MsgAddUsers {
  string creator = 1;
  string documentId = 2;
  string role = 3;
  repeated string addresses = 4;
}

message MsgAddUsersResponse {
  uint64 id = 1;
}

message MsgRemoveUsers {
  string creator = 1;
  string documentId = 2;
  string role = 3;
  repeated string addresses = 4;
}

message MsgRemoveUsersResponse {
  uint64 id = 1;
}

message MsgEditFiles {
  string creator = 1;
  string documentId = 2;
  repeated string files = 3;
}

message MsgEditFilesResponse {
  uint64 id = 1;
}

message MsgSignDocument {
  string creator = 1;
  string documentId = 2;
  repeated string files = 3;
}

message MsgSignDocumentResponse {
  uint64 id = 1;
}

// this line is used by starport scaffolding # proto/tx/message
