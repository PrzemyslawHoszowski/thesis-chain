// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: thesis/document.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Document struct {
	Index           string   `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	State           string   `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Files           []string `protobuf:"bytes,3,rep,name=files,proto3" json:"files,omitempty"`
	Admins          []string `protobuf:"bytes,4,rep,name=admins,proto3" json:"admins,omitempty"`
	Editors         []string `protobuf:"bytes,5,rep,name=editors,proto3" json:"editors,omitempty"`
	Signers         []string `protobuf:"bytes,6,rep,name=signers,proto3" json:"signers,omitempty"`
	Viewers         []string `protobuf:"bytes,7,rep,name=viewers,proto3" json:"viewers,omitempty"`
	Signed          []string `protobuf:"bytes,8,rep,name=signed,proto3" json:"signed,omitempty"`
	RejectionReason string   `protobuf:"bytes,9,opt,name=rejectionReason,proto3" json:"rejectionReason,omitempty"`
	LastEditHeight  int64    `protobuf:"varint,10,opt,name=lastEditHeight,proto3" json:"lastEditHeight,omitempty"`
}

func (m *Document) Reset()         { *m = Document{} }
func (m *Document) String() string { return proto.CompactTextString(m) }
func (*Document) ProtoMessage()    {}
func (*Document) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca1084a4f811d846, []int{0}
}
func (m *Document) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Document) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Document.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Document) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Document.Merge(m, src)
}
func (m *Document) XXX_Size() int {
	return m.Size()
}
func (m *Document) XXX_DiscardUnknown() {
	xxx_messageInfo_Document.DiscardUnknown(m)
}

var xxx_messageInfo_Document proto.InternalMessageInfo

func (m *Document) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Document) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Document) GetFiles() []string {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *Document) GetAdmins() []string {
	if m != nil {
		return m.Admins
	}
	return nil
}

func (m *Document) GetEditors() []string {
	if m != nil {
		return m.Editors
	}
	return nil
}

func (m *Document) GetSigners() []string {
	if m != nil {
		return m.Signers
	}
	return nil
}

func (m *Document) GetViewers() []string {
	if m != nil {
		return m.Viewers
	}
	return nil
}

func (m *Document) GetSigned() []string {
	if m != nil {
		return m.Signed
	}
	return nil
}

func (m *Document) GetRejectionReason() string {
	if m != nil {
		return m.RejectionReason
	}
	return ""
}

func (m *Document) GetLastEditHeight() int64 {
	if m != nil {
		return m.LastEditHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*Document)(nil), "thesis.thesis.Document")
}

func init() { proto.RegisterFile("thesis/document.proto", fileDescriptor_ca1084a4f811d846) }

var fileDescriptor_ca1084a4f811d846 = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xbd, 0x4e, 0xc3, 0x30,
	0x10, 0x80, 0xe3, 0x86, 0xa6, 0xad, 0x25, 0x40, 0xb2, 0x00, 0x79, 0xb2, 0x22, 0x06, 0x94, 0xa9,
	0x19, 0x78, 0x03, 0x04, 0x12, 0x73, 0x46, 0xb6, 0x50, 0x1f, 0xad, 0x51, 0x6b, 0x57, 0xb9, 0x03,
	0xca, 0x5b, 0xf0, 0x00, 0x3c, 0x10, 0x63, 0x47, 0x46, 0x94, 0xbc, 0x08, 0xf2, 0x4f, 0x97, 0x4e,
	0xc9, 0xf7, 0x7d, 0x27, 0x9d, 0x75, 0xfc, 0x92, 0x56, 0x80, 0x06, 0x6b, 0xed, 0x16, 0x6f, 0x1b,
	0xb0, 0x34, 0xdf, 0x76, 0x8e, 0x9c, 0x38, 0x8d, 0x7a, 0x1e, 0x3f, 0xd7, 0xdf, 0x23, 0x3e, 0xbd,
	0x4f, 0x13, 0xe2, 0x82, 0x8f, 0x8d, 0xd5, 0xb0, 0x93, 0xac, 0x64, 0xd5, 0xac, 0x89, 0xe0, 0x2d,
	0x52, 0x4b, 0x20, 0x47, 0xd1, 0x06, 0xf0, 0xf6, 0xc5, 0xac, 0x01, 0x65, 0x5e, 0xe6, 0xde, 0x06,
	0x10, 0x57, 0xbc, 0x68, 0xf5, 0xc6, 0x58, 0x94, 0x27, 0x41, 0x27, 0x12, 0x92, 0x4f, 0x40, 0x1b,
	0x72, 0x1d, 0xca, 0x71, 0x08, 0x07, 0xf4, 0x05, 0xcd, 0xd2, 0x42, 0x87, 0xb2, 0x88, 0x25, 0xa1,
	0x2f, 0xef, 0x06, 0x3e, 0x7c, 0x99, 0xc4, 0x92, 0xd0, 0x6f, 0x09, 0x43, 0x5a, 0x4e, 0xe3, 0x96,
	0x48, 0xa2, 0xe2, 0xe7, 0x1d, 0xbc, 0xc2, 0x82, 0x8c, 0xb3, 0x0d, 0xb4, 0xe8, 0xac, 0x9c, 0x85,
	0x37, 0x1f, 0x6b, 0x71, 0xc3, 0xcf, 0xd6, 0x2d, 0xd2, 0x83, 0x36, 0xf4, 0x08, 0x66, 0xb9, 0x22,
	0xc9, 0x4b, 0x56, 0xe5, 0xcd, 0x91, 0xbd, 0xab, 0x7f, 0x7a, 0xc5, 0xf6, 0xbd, 0x62, 0x7f, 0xbd,
	0x62, 0x5f, 0x83, 0xca, 0xf6, 0x83, 0xca, 0x7e, 0x07, 0x95, 0x3d, 0x1d, 0xce, 0xbb, 0xab, 0xd3,
	0x0f, 0x7d, 0x6e, 0x01, 0x9f, 0x8b, 0x70, 0xe5, 0xdb, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf0,
	0x1e, 0x35, 0x5b, 0x7e, 0x01, 0x00, 0x00,
}

func (m *Document) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Document) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Document) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastEditHeight != 0 {
		i = encodeVarintDocument(dAtA, i, uint64(m.LastEditHeight))
		i--
		dAtA[i] = 0x50
	}
	if len(m.RejectionReason) > 0 {
		i -= len(m.RejectionReason)
		copy(dAtA[i:], m.RejectionReason)
		i = encodeVarintDocument(dAtA, i, uint64(len(m.RejectionReason)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Signed) > 0 {
		for iNdEx := len(m.Signed) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signed[iNdEx])
			copy(dAtA[i:], m.Signed[iNdEx])
			i = encodeVarintDocument(dAtA, i, uint64(len(m.Signed[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Viewers) > 0 {
		for iNdEx := len(m.Viewers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Viewers[iNdEx])
			copy(dAtA[i:], m.Viewers[iNdEx])
			i = encodeVarintDocument(dAtA, i, uint64(len(m.Viewers[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintDocument(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Editors) > 0 {
		for iNdEx := len(m.Editors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Editors[iNdEx])
			copy(dAtA[i:], m.Editors[iNdEx])
			i = encodeVarintDocument(dAtA, i, uint64(len(m.Editors[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Admins) > 0 {
		for iNdEx := len(m.Admins) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Admins[iNdEx])
			copy(dAtA[i:], m.Admins[iNdEx])
			i = encodeVarintDocument(dAtA, i, uint64(len(m.Admins[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Files) > 0 {
		for iNdEx := len(m.Files) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Files[iNdEx])
			copy(dAtA[i:], m.Files[iNdEx])
			i = encodeVarintDocument(dAtA, i, uint64(len(m.Files[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintDocument(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintDocument(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDocument(dAtA []byte, offset int, v uint64) int {
	offset -= sovDocument(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Document) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovDocument(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovDocument(uint64(l))
	}
	if len(m.Files) > 0 {
		for _, s := range m.Files {
			l = len(s)
			n += 1 + l + sovDocument(uint64(l))
		}
	}
	if len(m.Admins) > 0 {
		for _, s := range m.Admins {
			l = len(s)
			n += 1 + l + sovDocument(uint64(l))
		}
	}
	if len(m.Editors) > 0 {
		for _, s := range m.Editors {
			l = len(s)
			n += 1 + l + sovDocument(uint64(l))
		}
	}
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovDocument(uint64(l))
		}
	}
	if len(m.Viewers) > 0 {
		for _, s := range m.Viewers {
			l = len(s)
			n += 1 + l + sovDocument(uint64(l))
		}
	}
	if len(m.Signed) > 0 {
		for _, s := range m.Signed {
			l = len(s)
			n += 1 + l + sovDocument(uint64(l))
		}
	}
	l = len(m.RejectionReason)
	if l > 0 {
		n += 1 + l + sovDocument(uint64(l))
	}
	if m.LastEditHeight != 0 {
		n += 1 + sovDocument(uint64(m.LastEditHeight))
	}
	return n
}

func sovDocument(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDocument(x uint64) (n int) {
	return sovDocument(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Document) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocument
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Document: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Document: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admins = append(m.Admins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Editors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Editors = append(m.Editors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Viewers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Viewers = append(m.Viewers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signed = append(m.Signed, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectionReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RejectionReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastEditHeight", wireType)
			}
			m.LastEditHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastEditHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDocument(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDocument
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDocument(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDocument
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDocument
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDocument
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDocument
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDocument
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDocument
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDocument        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDocument          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDocument = fmt.Errorf("proto: unexpected end of group")
)
